import streamlit as st
import joblib
import nltk
from googletrans import Translator
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• NLTK ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
nltk.download('punkt')
nltk.download('stopwords')

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning
model = joblib.load("sentiment_model_IS2.pkl")

st.title("Samsung Galaxy S25 Sentiment Analysis")

# Input text
user_input = st.text_area("Enter a review:")

if st.button("Analyze Sentiment"):
    if user_input:
        # ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
        translator = Translator()
        try:
            translated_text = translator.translate(user_input, src='auto', dest='en').text
        except:
            translated_text = user_input  # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
        
        stop_words = set(stopwords.words('english'))

        @st.cache_data  # ‡πÉ‡∏ä‡πâ caching ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î punkt ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        def download_punkt():
            try:
                nltk.download('punkt')
                return True  # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            except LookupError:
                return False  # ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        
        def preprocess_text(text):  # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 39
        #"""‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Text Preprocessing"""
        if not download_punkt():
            st.error("Error: punkt resource not found. Please check your internet connection and try again. If the problem persists, consider using a pre-built Docker image with NLTK resources.")
        return ""

            tokens = word_tokenize(text.lower())  # ‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á 4 ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            tokens = [word for word in tokens if word.isalnum()]  # ‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á 4 ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            tokens = [word for word in tokens if word not in stop_words]  # ‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á 4 ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            return " ".join(tokens)  # ‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á 4 ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

        # üîπ ‡∏ó‡∏≥ Preprocessing ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        processed_text = preprocess_text(translated_text)

        # üîπ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• Naive Bayes
        prediction = model.predict([processed_text])[0]

        sentiment_mapping = {1: "Positive üòä", 0: "Neutral üòê", -1: "Negative üòû"}
        st.write("Sentiment:", sentiment_mapping[prediction])

    else:
        st.write("Please enter some text.")
